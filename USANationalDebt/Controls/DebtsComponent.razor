@inject HttpClient Http


@if (ExternalModel is not null && InternalModel is not null)
{
    <div class="container d-flex justify-content-center flex-fill">
        <DebtComponent Title="@(IsChecked?dict[Language]["External"]:dict[Language]["Internal"])"
                       Debt="@(IsChecked?ExternalModel.Debt:InternalModel.Debt)"></DebtComponent>
        <input type="checkbox" @onchange="@ChangeState"/>
    </div>
}
else
{
    <div class="container d-flex justify-content-center flex-fill">
        Loading...
    </div>
}

@code{
    [Parameter]
    public string Language { get; set; }

    //language : (Name(external/internal):value)
    public Dictionary<string, Dictionary<string,string>> dict =
        new Dictionary<string, Dictionary<string, string>>();

    public DebtModelRead ExternalModel { get; set; }
    public DebtModelRead InternalModel { get; set; }

    public bool IsChecked { get; set; } = false;

    public void ChangeState(ChangeEventArgs e)
    {
        IsChecked = (bool)(e.Value as bool?);
    }

    Random random = new Random(DateTime.Now.Second);

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        swaggerClient client = new("https://localhost:44333/", Http);

        ExternalModel = await client.ExternalDebtAsync();
        InternalModel = await client.InternalDebtAsync();

        TimeSpan span = DateTime.Now - ExternalModel.Day;
        ExternalModel.Day = DateTime.Now;
        ExternalModel.Debt += span.TotalSeconds * ExternalModel.Increase;

        span = DateTime.Now - InternalModel.Day;
        InternalModel.Day = DateTime.Now;
        InternalModel.Debt += span.TotalSeconds * InternalModel.Increase;

        InitializeDictionaries();

        await Start();
    }

    public void InitializeDictionaries()
    {
        Dictionary<string, string> RussianDict = new Dictionary<string, string>();
        RussianDict.Add("External", "Внешний долг США");
        RussianDict.Add("Internal", "Внутренний долг США");
        dict.Add("Russian", RussianDict);
    }

    async Task Start()
    {
        await Task.Delay(1000);
        while (true)
        {
            await Timer();
        }

    }

    async Task Timer()
    {
        int delay = random.Next(500, 1500);
        await Task.Delay(delay);
        await AfterTime();
    }

    async Task AfterTime()
    {
        double increment = Math.Round(ExternalModel.Increase * ((double)random.Next(60, 140) / 100), 2);
        ExternalModel.Debt += increment;

        increment = Math.Round(InternalModel.Increase * ((double)random.Next(60, 140) / 100), 2);
        InternalModel.Debt += increment;

        StateHasChanged();
    }
}
